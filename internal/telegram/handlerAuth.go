package telegram

import (
	"context"
	"fmt"
	"regexp"

	tele "gopkg.in/telebot.v4"

	"github.com/3Danger/telegram_bot/internal/repo/user"
)

// State –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const (
	StateNone            = ""
	StateWaitingForName  = "waiting for name"
	StateWaitingForPhone = "waiting for phone"

	// –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	cmdBack      = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
	cmdConfirm   = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
	cmdEditName  = "üìù –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û"
	cmdEditPhone = "üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
)

// handlerAuth –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func (t *Telegram) handlerAuth(c tele.Context) error {
	ctx := getContext(c)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥"
	if c.Text() == cmdBack {
		return t.handleBackNavigation(ctx, c)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	switch c.Text() {
	case cmdEditName:
		return t.handleEditName(ctx, c)
	case cmdEditPhone:
		return t.handleEditPhone(ctx, c)
	case cmdConfirm:
		return t.handleConfirmRegistration(ctx, c)
	}

	// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	state, err := t.repo.state.Get(ctx, c.Sender().ID)
	if err != nil {
		return fmt.Errorf("get user state: %w", err)
	}

	switch state {
	case StateNone:
		return t.authStateNone(ctx, c)
	case StateWaitingForName:
		return t.authStateWaitingName(ctx, c)
	case StateWaitingForPhone:
		return t.authStateWaitingPhone(ctx, c)
	}

	return nil
}

func (t *Telegram) authStateNone(ctx context.Context, c tele.Context) error {
	currentUser, err := t.repo.user.User(ctx, c.Sender().ID)
	if err != nil {
		return fmt.Errorf("getting user: %w", err)
	}

	if currentUser != nil {
		if err = t.repo.state.Set(ctx, c.Sender().ID, StateNone); err != nil {
			return fmt.Errorf("set user state: %w", err)
		}

		return c.Send("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
	}

	if err = t.repo.state.Set(ctx, c.Sender().ID, StateWaitingForName); err != nil {
		return fmt.Errorf("set user state: %w", err)
	}

	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
}

func (t *Telegram) authStateWaitingName(ctx context.Context, c tele.Context) error {
	reg, err := regexp.Compile("[a-zA-Z–∞-—è–ê-–Ø]*")
	if err != nil {
		return fmt.Errorf("compile regular expression: %w", err)
	}

	names := reg.FindAllString(c.Text(), -1)

	if len(names) != 3 {
		return c.Send("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
	}

	newUser := user.User{
		ID:         c.Sender().ID,
		IsSupplier: false,
		FirstName:  names[0],
		LastName:   names[1],
		Surname:    names[2],
	}

	if err = t.repo.user.CreateUser(ctx, newUser); err != nil {
		return fmt.Errorf("update user name: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
	contactButton := &tele.ReplyMarkup{ResizeKeyboard: true}
	contactButton.Reply(
		contactButton.Row(
			contactButton.Contact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
		),
	)

	if err = t.repo.state.Set(ctx, c.Sender().ID, StateWaitingForPhone); err != nil {
		return fmt.Errorf("set user state: %w", err)
	}

	return c.Send("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", contactButton)
}

func (t *Telegram) authStateWaitingPhone(ctx context.Context, c tele.Context) error {
	if c.Message().Contact == nil {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'", createMenu(cmdBack))
	}

	phone := c.Message().Contact.PhoneNumber
	if err := t.repo.user.UpdateUserContactPhone(ctx, c.Sender().ID, phone); err != nil {
		return fmt.Errorf("update user phone: %w", err)
	}

	u, err := t.repo.user.User(ctx, c.Sender().ID)
	if err != nil {
		return fmt.Errorf("getting user: %w", err)
	}

	if u == nil {
		return user.ErrUserNotFound
	}

	msg := fmt.Sprintf(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
–ò–º—è: %s
–§–∞–º–∏–ª–∏—è: %s
–û—Ç—á–µ—Å—Ç–≤–æ: %s
–¢–µ–ª–µ—Ñ–æ–Ω: %s

–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å".
–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.`,
		u.FirstName, u.LastName, u.Surname, u.Phone)

	buttons := createBigMenu(
		[]string{cmdConfirm},
		[]string{cmdEditName, cmdEditPhone},
	)

	return c.Send(msg, buttons)
}
func (t *Telegram) handleBackNavigation(ctx context.Context, c tele.Context) error {
	state, err := t.repo.state.Get(ctx, c.Sender().ID)
	if err != nil {
		return fmt.Errorf("get user state: %w", err)
	}

	switch state {
	case StateWaitingForPhone:
		if err := t.repo.state.Set(ctx, c.Sender().ID, StateWaitingForName); err != nil {
			return fmt.Errorf("set user state: %w", err)
		}
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∑–∞–Ω–æ–≤–æ", createMenu(cmdBack))

	case StateWaitingForName:
		if err := t.repo.state.Set(ctx, c.Sender().ID, StateNone); err != nil {
			return fmt.Errorf("set user state: %w", err)
		}
		return c.Send("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", createMenu(home))
	}

	return nil
}

func (t *Telegram) handleEditName(ctx context.Context, c tele.Context) error {
	if err := t.repo.state.Set(ctx, c.Sender().ID, StateWaitingForName); err != nil {
		return fmt.Errorf("set user state: %w", err)
	}
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∑–∞–Ω–æ–≤–æ", createMenu(cmdBack))
}

func (t *Telegram) handleEditPhone(ctx context.Context, c tele.Context) error {
	if err := t.repo.state.Set(ctx, c.Sender().ID, StateWaitingForPhone); err != nil {
		return fmt.Errorf("set user state: %w", err)
	}

	contactButton := &tele.ReplyMarkup{ResizeKeyboard: true}
	contactButton.Reply(
		contactButton.Row(contactButton.Contact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")),
		contactButton.Row(contactButton.Text(cmdBack)),
	)

	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–Ω–æ–≤–æ", contactButton)
}

func (t *Telegram) handleConfirmRegistration(ctx context.Context, c tele.Context) error {
	if err := t.repo.state.Set(ctx, c.Sender().ID, StateNone); err != nil {
		return fmt.Errorf("set user state: %w", err)
	}

	return c.Send("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", createMenu(home))
}
