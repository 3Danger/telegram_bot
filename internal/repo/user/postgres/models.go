// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgres

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type UserType string

const (
	UserTypeValue0   UserType = ""
	UserTypeSupplier UserType = "supplier"
	UserTypeCustomer UserType = "customer"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType `json:"user_type"`
	Valid    bool     `json:"valid"` // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

// Все пользователи
type User struct {
	ID int64 `json:"id"`
	// Тип пользователя
	UserType UserType `json:"user_type"`
	// Имя
	FirstName string `json:"first_name"`
	// Фамилия
	LastName string `json:"last_name"`
	// Телефон
	Phone string `json:"phone"`
	// Ник в телеграмме
	TgNick string `json:"tg_nick"`
	// Доп. контакты, инфо
	Additional string    `json:"additional"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}
