// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package query

import (
	"context"
)

const delete = `-- name: Delete :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, user_type, first_name, last_name, surname, phone, whatsapp, telegram, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserType,
		&i.FirstName,
		&i.LastName,
		&i.Surname,
		&i.Phone,
		&i.Whatsapp,
		&i.Telegram,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const set = `-- name: Set :exec
INSERT INTO users (id, user_type, first_name, last_name, surname, phone, whatsapp, telegram)
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8
)
ON CONFLICT (id) DO UPDATE SET
    user_type = EXCLUDED.user_type,
    first_name = EXCLUDED.first_name,
    last_name = EXCLUDED.last_name,
    surname = EXCLUDED.surname,
    phone = EXCLUDED.phone,
    whatsapp = EXCLUDED.whatsapp,
    telegram = EXCLUDED.telegram,
    updated_at = EXCLUDED.updated_at
`

type SetParams struct {
	ID        int64
	UserType  UserType
	FirstName string
	LastName  string
	Surname   string
	Phone     string
	Whatsapp  string
	Telegram  string
}

func (q *Queries) Set(ctx context.Context, arg SetParams) error {
	_, err := q.db.Exec(ctx, set,
		arg.ID,
		arg.UserType,
		arg.FirstName,
		arg.LastName,
		arg.Surname,
		arg.Phone,
		arg.Whatsapp,
		arg.Telegram,
	)
	return err
}
