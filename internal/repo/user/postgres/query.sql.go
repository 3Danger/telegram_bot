// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"
)

const delete = `-- name: Delete :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, user_type, first_name, last_name, phone, tg_nick, additional, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserType,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.TgNick,
		&i.Additional,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const upsert = `-- name: Upsert :exec
INSERT INTO users (id, user_type, first_name, last_name, phone, tg_nick, additional)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7)
ON CONFLICT (id) DO UPDATE SET user_type  = EXCLUDED.user_type,
                               first_name = EXCLUDED.first_name,
                               last_name  = EXCLUDED.last_name,
                               phone      = EXCLUDED.phone,
                               tg_nick    = EXCLUDED.tg_nick,
                               additional = EXCLUDED.additional,
                               updated_at = NOW()
`

type UpsertParams struct {
	ID         int64    `json:"id"`
	UserType   UserType `json:"user_type"`
	FirstName  string   `json:"first_name"`
	LastName   string   `json:"last_name"`
	Phone      string   `json:"phone"`
	TgNick     string   `json:"tg_nick"`
	Additional string   `json:"additional"`
}

func (q *Queries) Upsert(ctx context.Context, arg *UpsertParams) error {
	_, err := q.db.Exec(ctx, upsert,
		arg.ID,
		arg.UserType,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.TgNick,
		arg.Additional,
	)
	return err
}
