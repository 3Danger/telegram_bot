// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6dcfa0d34561455b87203c7522970d6075b34144/templates/timeout
// gowrap: http://github.com/hexdigest/gowrap

package wrappers

//go:generate gowrap gen -p github.com/3Danger/telegram_bot/internal/repo/user/postgres -i Querier -t https://raw.githubusercontent.com/hexdigest/gowrap/6dcfa0d34561455b87203c7522970d6075b34144/templates/timeout -o timeout.go -l ""

import (
	"context"
	"time"

	_sourcePostgres "github.com/3Danger/telegram_bot/internal/repo/user/postgres"
)

// QuerierWithTimeout implements _sourcePostgres.Querier interface instrumented with timeouts
type QuerierWithTimeout struct {
	_sourcePostgres.Querier
	config QuerierWithTimeoutConfig
}

type QuerierWithTimeoutConfig struct {
	DeleteTimeout time.Duration

	GetTimeout time.Duration

	UpsertTimeout time.Duration
}

// NewQuerierWithTimeout returns QuerierWithTimeout
func NewQuerierWithTimeout(base _sourcePostgres.Querier, config QuerierWithTimeoutConfig) QuerierWithTimeout {
	return QuerierWithTimeout{
		Querier: base,
		config:  config,
	}
}

// Delete implements _sourcePostgres.Querier
func (_d QuerierWithTimeout) Delete(ctx context.Context, id int64) (err error) {
	var cancelFunc func()
	if _d.config.DeleteTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.DeleteTimeout)
		defer cancelFunc()
	}
	return _d.Querier.Delete(ctx, id)
}

// Get implements _sourcePostgres.Querier
func (_d QuerierWithTimeout) Get(ctx context.Context, id int64) (up1 *_sourcePostgres.User, err error) {
	var cancelFunc func()
	if _d.config.GetTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.GetTimeout)
		defer cancelFunc()
	}
	return _d.Querier.Get(ctx, id)
}

// Upsert implements _sourcePostgres.Querier
func (_d QuerierWithTimeout) Upsert(ctx context.Context, arg *_sourcePostgres.UpsertParams) (err error) {
	var cancelFunc func()
	if _d.config.UpsertTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UpsertTimeout)
		defer cancelFunc()
	}
	return _d.Querier.Upsert(ctx, arg)
}
